import logging
from config import BOT_TOKEN
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –ó–∞–¥–∞–Ω–∏–µ 1: –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ü—Ä–∏–≤–µ—Ç"))
    builder.add(types.KeyboardButton(text="–ü–æ–∫–∞"))
    builder.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.message(F.text.in_(["–ü—Ä–∏–≤–µ—Ç", "–ü–æ–∫–∞"]))
async def handle_buttons(message: types.Message):
    user_name = message.from_user.first_name

    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}!")
    else:
        await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user_name}!")


# –ó–∞–¥–∞–Ω–∏–µ 2: –ö–Ω–æ–ø–∫–∏ —Å URL-—Å—Å—ã–ª–∫–∞–º–∏
@dp.message(Command("links"))
async def cmd_links(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å URL-–∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–æ–≤–æ—Å—Ç–∏ üì∞",
        url="https://news.google.com"
    ))
    builder.add(types.InlineKeyboardButton(
        text="–ú—É–∑—ã–∫–∞ üéµ",
        url="https://www.youtube.com"
    ))
    builder.add(types.InlineKeyboardButton(
        text="–í–∏–¥–µ–æ üé•",
        url="https://vimeo.com"
    ))
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )


# –ó–∞–¥–∞–Ω–∏–µ 3: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message(Command("dynamic"))
async def cmd_dynamic(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ ‚ûï",
        callback_data="show_more"
    ))

    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –æ–ø—Ü–∏–π:",
        reply_markup=builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
@dp.callback_query(F.data == "show_more")
async def show_more_options(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–û–ø—Ü–∏—è 1 ‚úÖ",
        callback_data="option_1"
    ))
    builder.add(types.InlineKeyboardButton(
        text="–û–ø—Ü–∏—è 2 ‚úÖ",
        callback_data="option_2"
    ))
    builder.adjust(2)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ü–∏–π
@dp.callback_query(F.data == "option_1")
async def handle_option_1(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–ø—Ü–∏—é 1")
    await callback.answer()


@dp.callback_query(F.data == "option_2")
async def handle_option_2(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–ø—Ü–∏—é 2")
    await callback.answer()


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())